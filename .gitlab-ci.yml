variables:
  GIT_STRATEGY: fetch
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_SSL_NO_VERIFY: "true"

stages:
- compile-minimal
- compile-full
- run-tests
- run-draw
- quality

.build_template: &build_template
  stage: compile-minimal
  only:
    - merge_requests
    - schedules
  script:
    - ./make.sh install
  variables:
    CMAKE_FLAGS: "-DCMAKE_DISABLE_FIND_PACKAGE_ROOT=TRUE"

build_centos7:
  image: centos:centos7
  before_script:
    - yum -q -y update
    - yum -y install epel-release gcc gcc-c++ gcc-gfortran blas blas-devel lapack lapack-devel boost-devel
    - yum -y install yum-plugin-ovl which yaml-cpp libyaml yaml-cpp-devel libyaml-devel gsl-devel cmake3 autoconf make coreutils automake libtool zlib-devel
    - ln -s /usr/bin/cmake3 /usr/bin/cmake 
  <<: *build_template

build_centos8:
  image: centos:centos8
  before_script:
    - dnf -q -y update
    - dnf -y install epel-release gcc gcc-c++ gcc-gfortran blas lapack boost-devel 
    - dnf -y install  dnf-plugin-ovl which yaml-cpp-devel  gsl-devel cmake autoconf make automake libtool zlib-devel
    - dnf -y --enablerepo=powertools install libyaml-devel blas-devel lapack-devel
  <<: *build_template

build_ubuntu:
  image: ubuntu:20.04
  before_script:
    - export DEBIAN_FRONTEND=noninteractive
    - apt-get update -qq -y
    - apt-get install -y wget cmake automake libtool libyaml-dev libyaml-cpp-dev g++ gfortran libgsl-dev libblas-dev liblapack-dev libceres-dev pkg-config
    - apt-get -y autoremove
    - apt-get -y autoclean
  <<: *build_template

build_ubuntu_clang:
  image: clangbuiltlinux/ubuntu
  before_script:
    - export DEBIAN_FRONTEND=noninteractive
    - apt-get update -qq -y
    - apt-get install -y wget cmake automake libtool libyaml-dev libyaml-cpp-dev  libgsl-dev libblas-dev liblapack-dev libceres-dev pkg-config 
    - apt-get install -y  clang flang
    - apt-get purge -y gcc
    - apt-get -y autoremove
    - apt-get -y autoclean
  <<: *build_template

build_fedora:
  image: fedora:35
  before_script:
    - dnf -q -y update
    - dnf -y install  gcc gcc-c++ gcc-gfortran blas lapack boost-devel
    - dnf -y install  dnf-plugin-ovl which yaml-cpp-devel  gsl-devel cmake autoconf make automake libtool zlib-devel ceres-solver
    - dnf -y  install libyaml-devel blas-devel lapack-devel
  <<: *build_template


build_deps_ubuntu:
  stage: compile-full
  needs: [build_ubuntu]
  only: 
    - merge_requests
    - schedules
  timeout: 60m
  script: 
    - yum install -y root gcc-gfortran  root libgfortran-static redhat-lsb-core 
    - ./tools/install-xfitter deps
    - . setup.sh
    - ./make.sh install
    - git clone https://gitlab.cern.ch/fitters/xfitter-datafiles.git temp-datafiles
    - mv temp-datafiles/.git datafiles/.git
    - rm -rf temp-datafiles
    - cd datafiles
    - git reset --hard HEAD
    - cd -
  artifacts:
    when: always
    paths:
      - install.log
    expire_in: 1 day


job-tests:
  stage: run-tests
  needs: [build_deps_ubuntu]
  only:
    - merge_requests
    - schedules
  timeout: 60m
  script:
    # for the next command the output is redirected, to see it (in case of problems) uncomment the command below which will print it
    - ./tools/download-lhapdf.sh HERAPDF20_NNLO_EIG HERAPDF20_NNLO_VAR CT10 CT10nlo CT14nnlo ABMP16_3_nlo ABMP16_5_nnlo HERAPDF20_NLO_FF3B_EIG NNPDF30_nlo_as_0118 NNPDF31_nlo_as_0118_hessian NNPDF31_nnlo_as_0118 MMHT2014nnlo68cl nCTEQ15FullNuc_1_1 nCTEQ15FullNuc_184_74 >& download-lhapdf.log
    - ./tools/test.sh
  artifacts:
    when: on_failure
    paths:
      - temp/**/test.log
      - temp/**/xfitter.log
    expire_in: 1 day

job-draw:
  stage: run-draw
  needs: [job-tests]
  only:
    - merge_requests
    - schedules
  timeout: 20m
  script: 
    - ./bin/xfitter-draw temp/defaultNNLO/output
    - xfitter-process profile  output/pdf_shifts.dat output/pdf_rotate.dat ../deps/lhapdf/share/LHAPDF/CT10 ../deps/lhapdf/share/LHAPDF/CT10_profile
  artifacts:
    when: always
    paths:
      - temp/**/*.pdf
    expire_in: 1 day


include:
  - template: Code-Quality.gitlab-ci.yml

code_quality:
  stage: quality
#  artifacts:
#    reports:
#      codequality: gl-code-quality-report.json
  rules:
    - if: '$CODE_QUALITY_DISABLED'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"' # Run code quality job in merge request pipelines
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'      # Run code quality job in pipelines on the default branch (but not in other branch pipelines)
    - if: '$CI_COMMIT_TAG'                               # Run code quality job in pipelines for tags
