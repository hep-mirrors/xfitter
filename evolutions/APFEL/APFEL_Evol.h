//Automatically generated by ./tools/AddEvolution.py on 2019-05-05
#pragma once
#include "BaseEvolution.h"
#include <yaml-cpp/yaml.h>

namespace xfitter
{

/**
  @class APFEL_Evol

  @brief A class for APFEL evolution

  ADD DESCRIPTION HERE

*/

class APFEL_Evol : public BaseEvolution
{
public:
  APFEL_Evol(const char *name) : BaseEvolution(name) {}
  virtual const char *getClassName() const override final { return "APFEL"; };
  virtual void atStart() override final;
  virtual void atIteration() override final;
  virtual void atConfigurationChange() override final;
  virtual std::map<int, double> xfxQmap(double x, double Q) override final;
  virtual double xfxQ(int i, double x, double Q) override final;
  virtual void xfxQarray(double x, double Q, double *pdfs) override final;
  virtual double getAlphaS(double Q) override final;
  virtual std::vector<double> getXgrid() override final;
  virtual std::vector<double> getQgrid() override final;
private:
  /// Class to keep track of evolution types (QCD, QCD+QED)
  enum class evolType {
    QCD, QUniD
  };
  evolType _evolType;
  /// Evolution starting scale:
  double _Q0;
  /// Last evolved Q for iteration:
  double _Qlast;
  /// Yaml parameters
  YAML::Node _yAPFEL;
  /// Q grid boundaries:
  double _Qmin, _Qmax;
};
} // namespace xfitter
